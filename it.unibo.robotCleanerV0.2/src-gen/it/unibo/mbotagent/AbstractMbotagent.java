/* Generated by AN DISI Unibo */ 
package it.unibo.mbotagent;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractMbotagent extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractMbotagent(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/mbotagent/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/mbotagent/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("waitStartRobot",waitStartRobot);
	    	stateTab.put("doWork",doWork);
	    	stateTab.put("handleSonarEvents",handleSonarEvents);
	    	stateTab.put("checkMobileObstacle",checkMobileObstacle);
	    	stateTab.put("fixedObstacle",fixedObstacle);
	    	stateTab.put("robotAtSonar1",robotAtSonar1);
	    	stateTab.put("robotAtSonar2",robotAtSonar2);
	    	stateTab.put("doWaitAnswer",doWaitAnswer);
	    	stateTab.put("checkTheAnswer",checkTheAnswer);
	    	stateTab.put("noAnswer",noAnswer);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "mbotagent tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	//switchTo waitStartRobot
	        switchToPlanAsNextState(pr, myselfName, "mbotagent_"+myselfName, 
	              "waitStartRobot",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun waitStartRobot = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_waitStartRobot",0);
	     pr.incNumIter(); 	
	    	String myselfName = "waitStartRobot";  
	    	temporaryStr = "\"mbotagent waitStartRobot\"";
	    	println( temporaryStr );  
	    	temporaryStr = "\"POSITION THE ROBOT AT SONAR1 AND SEND START COMMAND\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"mbotagent_"+myselfName,false,
	          new StateFun[]{stateTab.get("doWork") }, 
	          new String[]{"true","E","initCmd" },
	          6000000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_waitStartRobot){  
	    	 println( getName() + " plan=waitStartRobot WARNING:" + e_waitStartRobot.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitStartRobot
	    
	    StateFun doWork = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_doWork",0);
	     pr.incNumIter(); 	
	    	String myselfName = "doWork";  
	    	temporaryStr = "\"mbotagent doWork\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"mbotagent_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleSonarEvents") }, 
	          new String[]{"true","E","sonarSensor" },
	          6000000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_doWork){  
	    	 println( getName() + " plan=doWork WARNING:" + e_doWork.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//doWork
	    
	    StateFun handleSonarEvents = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleSonarEvents",-1);
	    	String myselfName = "handleSonarEvents";  
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("sonar(roversonar,DISTANCE)");
	    	if( currentEvent != null && currentEvent.getEventId().equals("sonarSensor") && 
	    		pengine.unify(curT, Term.createTerm("sonar(NAME,DISTANCE)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			//println("WARNING: variable substitution not yet fully implemented " ); 
	    			{//actionseq
	    			temporaryStr = QActorUtils.unifyMsgContent(pengine, "usercmd(CMD)","usercmd(robotgui(h(low)))", guardVars ).toString();
	    			emit( "mindcmd", temporaryStr );
	    			temporaryStr = "sonar(roversonar)";
	    			println( temporaryStr );  
	    			temporaryStr = QActorUtils.unifyMsgContent(pengine, "usercmd(CMD)","usercmd(robotgui(d(low)))", guardVars ).toString();
	    			emit( "mindcmd", temporaryStr );
	    			temporaryStr = QActorUtils.unifyMsgContent(pengine,"hopemobile(ARG)","hopemobile(\"\")", guardVars ).toString();
	    			sendMsg("hopemobile","mbotagent", QActorContext.dispatch, temporaryStr ); 
	    			};//actionseq
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"mbotagent_"+myselfName,true,
	          new StateFun[]{stateTab.get("checkMobileObstacle"), stateTab.get("robotAtSonar1"), stateTab.get("robotAtSonar2") }, 
	          new String[]{"true","M","hopemobile", "true","M","atsonar1", "true","M","atsonar2" },
	          600000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_handleSonarEvents){  
	    	 println( getName() + " plan=handleSonarEvents WARNING:" + e_handleSonarEvents.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleSonarEvents
	    
	    StateFun checkMobileObstacle = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("checkMobileObstacle",-1);
	    	String myselfName = "checkMobileObstacle";  
	    	temporaryStr = "\"checkMobileObstacle\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "usercmd(CMD)","usercmd(robotgui(a(low)))", guardVars ).toString();
	    	emit( "mindcmd", temporaryStr );
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(1000,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "checkMobileObstacle";
	    	if( ! aar.getGoon() ) return ;
	    	//bbb
	     msgTransition( pr,myselfName,"mbotagent_"+myselfName,false,
	          new StateFun[]{stateTab.get("fixedObstacle") }, 
	          new String[]{"true","E","sonarSensor" },
	          1000, "doWork" );//msgTransition
	    }catch(Exception e_checkMobileObstacle){  
	    	 println( getName() + " plan=checkMobileObstacle WARNING:" + e_checkMobileObstacle.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//checkMobileObstacle
	    
	    StateFun fixedObstacle = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("fixedObstacle",-1);
	    	String myselfName = "fixedObstacle";  
	    	temporaryStr = "\"fixedobstaclee\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "usercmd(CMD)","usercmd(robotgui(d(low)))", guardVars ).toString();
	    	emit( "mindcmd", temporaryStr );
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(700,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "fixedObstacle";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"waitAnswer(ARG)","waitAnswer(\"obstacleAvoidance\")", guardVars ).toString();
	    	sendMsg("waitAnswer","roverobstacleavoiadanceagent", QActorContext.dispatch, temporaryStr ); 
	    	//bbb
	     msgTransition( pr,myselfName,"mbotagent_"+myselfName,false,
	          new StateFun[]{stateTab.get("doWaitAnswer") }, 
	          new String[]{"true","M","waitAnswer" },
	          600000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_fixedObstacle){  
	    	 println( getName() + " plan=fixedObstacle WARNING:" + e_fixedObstacle.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//fixedObstacle
	    
	    StateFun robotAtSonar1 = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("robotAtSonar1",-1);
	    	String myselfName = "robotAtSonar1";  
	    	printCurrentMessage(false);
	    	//switchTo doWork
	        switchToPlanAsNextState(pr, myselfName, "mbotagent_"+myselfName, 
	              "doWork",false, false, null); 
	    }catch(Exception e_robotAtSonar1){  
	    	 println( getName() + " plan=robotAtSonar1 WARNING:" + e_robotAtSonar1.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//robotAtSonar1
	    
	    StateFun robotAtSonar2 = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("robotAtSonar2",-1);
	    	String myselfName = "robotAtSonar2";  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "usercmd(CMD)","usercmd(robotgui(h(low)))", guardVars ).toString();
	    	emit( "mindcmd", temporaryStr );
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"redoWork(ARG)","redoWork(\"\")", guardVars ).toString();
	    	sendMsg("redoWork","mbotagent", QActorContext.dispatch, temporaryStr ); 
	    	//switchTo waitStartRobot
	        switchToPlanAsNextState(pr, myselfName, "mbotagent_"+myselfName, 
	              "waitStartRobot",false, false, null); 
	    }catch(Exception e_robotAtSonar2){  
	    	 println( getName() + " plan=robotAtSonar2 WARNING:" + e_robotAtSonar2.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//robotAtSonar2
	    
	    StateFun doWaitAnswer = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("doWaitAnswer",-1);
	    	String myselfName = "doWaitAnswer";  
	    	temporaryStr = "\"mbotagent WAITS that a passage is found\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"mbotagent_"+myselfName,false,
	          new StateFun[]{stateTab.get("checkTheAnswer") }, 
	          new String[]{"true","M","avoidancedone" },
	          60000, "noAnswer" );//msgTransition
	    }catch(Exception e_doWaitAnswer){  
	    	 println( getName() + " plan=doWaitAnswer WARNING:" + e_doWaitAnswer.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//doWaitAnswer
	    
	    StateFun checkTheAnswer = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("checkTheAnswer",-1);
	    	String myselfName = "checkTheAnswer";  
	    	printCurrentEvent(false);
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("avoidancedone(\"ok\")");
	    	if( currentMessage != null && currentMessage.msgId().equals("avoidancedone") && 
	    		pengine.unify(curT, Term.createTerm("avoidancedone(ARGS)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg="goon";
	    		/* AddRule */
	    		parg = updateVars(Term.createTerm("avoidancedone(ARGS)"),  Term.createTerm("avoidancedone(\"ok\")"), 
	    			    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) addRule(parg);	    		  					
	    	}
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("avoidancedone(\"unavoidable\")");
	    	if( currentMessage != null && currentMessage.msgId().equals("avoidancedone") && 
	    		pengine.unify(curT, Term.createTerm("avoidancedone(ARGS)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg="usercmd(robotgui(h(low)))";
	    		/* RaiseEvent */
	    		parg = updateVars(Term.createTerm("avoidancedone(ARGS)"),  Term.createTerm("avoidancedone(\"unavoidable\")"), 
	    			    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) emit( "mindcmd", parg );
	    	}
	    	//switchTo doWork
	        switchToPlanAsNextState(pr, myselfName, "mbotagent_"+myselfName, 
	              "doWork",false, true, " ??goon"); 
	    }catch(Exception e_checkTheAnswer){  
	    	 println( getName() + " plan=checkTheAnswer WARNING:" + e_checkTheAnswer.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//checkTheAnswer
	    
	    StateFun noAnswer = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("noAnswer",-1);
	    	String myselfName = "noAnswer";  
	    	temporaryStr = "\"mbotagent no answer received. Stop mbot\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "usercmd(CMD)","usercmd(robotgui(h(low)))", guardVars ).toString();
	    	emit( "mindcmd", temporaryStr );
	    	repeatPlanNoTransition(pr,myselfName,"mbotagent_"+myselfName,false,false);
	    }catch(Exception e_noAnswer){  
	    	 println( getName() + " plan=noAnswer WARNING:" + e_noAnswer.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//noAnswer
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
