/* 
 * =======================================================================================
 * mbotExecutor.qa
 * A robot called mbot is able to execute move commands in a REAL environment 
 * =======================================================================================
 */      
System mbotExecutor            
Event usercmd     : usercmd(CMD)  				//from web gui
Event realSonar   : sonar( DISTANCE )			//From real sonar on real robot
Event sonarSensor : sonar( NAME, DISTANCE )
Event mindcmd     : usercmd(CMD) 				//from the appl agent (the 'mind')
 
Dispatch moveMbot : usercmd( CMD )   	
Dispatch cmdToLed : cmdToLed(CMD)				


Context ctxMbotExecutor ip  [ host="localhost"  port=8029 ]      
EventHandler evh for usercmd , mindcmd -print {	//event-driven
 	forwardEvent mbot -m moveMbot  	//from event to message     
};

/*
 * -----------------------------------------------------
 * The mbot is a an interpreter of commands
 * -----------------------------------------------------
 */   
QActor mbot context ctxMbotExecutor {   
	Rules{	  
		onRaspberry.
  		foundObstacle :- retract( realDistance(D) ), eval( lt, D, 20 ).
	}
	Plan init normal [       
 	    [ !? onRaspberry] //javaRun it.unibo.mbot.mbotConnArduino.initRasp()	;
	    println("mbot START")    
  	] 
    switchTo waitForCmd        
		
   	Plan waitForCmd[  ]  
  	transition stopAfter 3600000   	//1h 
 		whenMsg moveMbot   -> execMove 
   	finally repeatPlan    
	   
  	Plan execMove resumeLastPlan[     
  		printCurrentMessage;
     	onMsg moveMbot : usercmd( robotgui(h(X)) )  -> println("stop");
  		onMsg moveMbot : usercmd( robotgui(w(X)) )  -> println("avanti");
    	onMsg moveMbot : usercmd( robotgui(s(X)) )  -> println("indietro");
  		onMsg moveMbot : usercmd( robotgui(a(X)) )   -> {
  			println("sinistra");
			delay 680;	//TODO: use some configuration parameter
 			println("stop")			
  		};    
   		onMsg moveMbot : usercmd( robotgui(d(X)) )  -> {
			println("destra");
			delay 680;//TODO: use some configuration parameter
	 		println("stop")  			
   		}  
    	//onMsg moveMbot : usercmd( robotgui(f(X)) )  -> println("segui linea")
   	]           
}  
 
/*
 * -----------------------------------------------------
 * Convert sonar events into polar
 * -----------------------------------------------------
 */
QActor realsonardetector context ctxMbotExecutor {	
	Plan init normal [
		println("sonardetector STARTS ")
	]
	switchTo waitForEvents
	
	Plan waitForEvents[ ]    
  	transition stopAfter 3600000   	//1h     
  		whenEvent realSonar   ->  handleRealSonar
	  	
 	Plan handleRealSonar [ 
 		printCurrentEvent; 		
		onEvent realSonar    : sonar( DISTANCE ) -> 
			emit sonarSensor : sonar( realsonar, DISTANCE )		 //convert in int???
	 
 	]
 	switchTo waitForEvents
 }
 
 
 //Implementazione del led
QActor ledonmbot context ctxMbotExecutor {
	
	Plan init normal[
		println("Inizializza oggetto led")
		
	]
	switchTo waitCommand
	
	Plan waitCommand[]
	transition stopAfter 3600000
		whenMsg cmdToLed -> doWork
	finally repeatPlan
	
	Plan doWork resumeLastPlan[
		
		onMsg cmdToLed : cmdToLed( on ) -> println("LED ON");
		onMsg cmdToLed : cmdToLed( off ) -> println("LED OFF")
	]
		
		
}
 