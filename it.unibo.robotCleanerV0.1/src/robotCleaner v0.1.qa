/* [
 * First Model of Analysis Requirement
 * 
 */
System robotCleaner

Event usercmd      : usercmd(CMD)  		//Can be Start or Stop
Event sonarSensor  : sonar(NAME, DISTANCE)			//NAME= sonar1 | sonar2 | roversonar
Event dataSensor : dataSensor(TEMP, TIME)     //Invia la temperatura e l'orario della giornata

Dispatch cmdToLed : cmdToLed(CMD) //On, Off led
Dispatch dataSensorMsg : dataSensor(TEMP,TIME)
Dispatch usercmdMsg : usercmd(CMD)


Context ctxRobotCleaner ip [ host="localhost"   port=8032 ] -g white
EventHandler evh for dataSensor -print {	//event-driven ; no Mqtt support yet
 	forwardEvent mbotcleaner -m dataSensorMsg  	//from event to message
}; 
EventHandler evh2 for usercmd -print {	//event-driven ; no Mqtt support yet
 	forwardEvent mbotcleaner -m usercmdMsg  	//from event to message
};   

QActor mbotcleaner context ctxRobotCleaner {
	Rules{
		eval(ge, X, X).
		eval(ge, X, V) :- eval(gt, X, V) .
		eval(le, X, X).
		eval(le, X, V) :-  eval(lt, X, V).
		evalSensor(start):- curTemperatureValue(TEMP), eval(lt, TEMP, 25),curTimeValue(TIME),  eval(ge, TIME, 15),eval(lt,TIME,17).
 		evalSensor(halt) :- curTemperatureValue(TEMP), limitTemperatureValue(MAX), eval(ge, TEMP, MAX).
 		evalSensor(halt) :- curTimeValue(TIME), limitTimeValue(MIN, _), eval(lt, TIME, MIN).
 		evalSensor(halt) :- curTimeValue(TIME), limitTimeValue(_, MAX), eval(gt, TIME, MAX).
 	}
 	
	Plan init normal [
		println("Robot Ready")
	]
	switchTo waitStart
	
	Plan waitStart []
	transition stopAfter 36000000
		whenMsg dataSensorMsg -> handleDataSensor,
		whenMsg usercmdMsg -> doWork
	finally repeatPlan
	
	/*aggiorniamo il Resource Model con i valori correnti di Time e Temperature*/
	Plan handleDataSensor resumeLastPlan[
		printCurrentEvent;
		onMsg dataSensorMsg : dataSensor(TEMP,TIME) ->
			ReplaceRule curTemperatureValue(X)  with curTemperatureValue(TEMP);
			
		onMsg dataSensorMsg : dataSensor(TEMP, TIME) -> 
			ReplaceRule curTimeValue(X)  with curTimeValue(TIME)
	]
	
	
	/* Il robot parte se è arrivato il messaggio di 'start' e i valori del Sensore (Time e Temperature)
	 * sono nei parametri accettabili.
	 * Si ferma quando arriva un messaggio di 'halt'*/
	Plan doWork resumeLastPlan[
		printCurrentEvent;
		onMsg usercmdMsg : usercmd(start) -> {
			
			[!? evalSensor(start)]{
				println("START");
				forward ledonmbot -m cmdToLed : cmdToLed( on )
			}
			else
				println("DON'T MOVE")
		};
		
		onMsg usercmdMsg : usercmd(halt) -> {
			println("STOP");
			forward ledonmbot -m cmdToLed : cmdToLed( off )
		}
		
	]
	
//TODO: TESTING,FIXED OBSTACLE,QActor Sonar
	
}

//Implementazione del led
QActor ledonmbot context ctxRobotCleaner {
	
	Plan init normal[
		println("Inizializza oggetto led")
	]
	switchTo waitCommand
	
	Plan waitCommand[]
	transition stopAfter 3600000
		whenMsg cmdToLed -> doWork
	finally repeatPlan
	
	Plan doWork resumeLastPlan[
		
		onMsg cmdToLed : cmdToLed( on ) -> println("LED ON");
		onMsg cmdToLed : cmdToLed( off ) -> println("LED OFF")
	]
		
}


QActor tester context ctxRobotCleaner {
	
	Plan init normal[
		println("Start Test")
	]
	switchTo test
	
	Plan test[
		printCurrentEvent;
		emit usercmd : usercmd(start);
		emit dataSensor : dataSensor(24,16);
		delay 10000;
		emit usercmd : usercmd(halt)		
	]
}